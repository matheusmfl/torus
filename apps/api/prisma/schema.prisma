generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  name      String
  cpf       String   @unique
  email     String   @unique
  password  String
  role      Role     @default(USER) // USER ou ADMIN
  tickets   Ticket[] // Relacionamento com os ingressos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Event {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  location  String
  tickets   Ticket[] // Relacionamento com ingressos vendidos
  batches   Batch[] // Relacionamento com os lotes de ingressos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

model Batch {
  id        String   @id @default(uuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  price     Decimal
  total     Int
  available Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Ticket    Ticket[]

  @@map("lote")
}

model Ticket {
  id          String   @id @default(uuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  batchId     String
  batch       Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)
  qrCode      String   @unique
  isValidated Boolean  @default(false)
  isRevoked   Boolean  @default(false)
  isRefunded  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ingresso")
}
